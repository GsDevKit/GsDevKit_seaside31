#! /bin/bash
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-l <post-load-tode-script> ] \
	              <source-seaside-stone-name> \
		      <target-seaside-stone-name> <gemstone-version>

Perform a GemStone upgrade of the <source-seaside-stone-name> to GemStone 
version <gemstone-version> in a new stone named <target-seaside-stone-name>.

OPTIONS
  -h display help
  -f
     Force creation of new stone by deleting 
     \$GS_HOME/gemstone/stone/<target-stone-name> directory if it exists
  -l <post-load-tode-script>
     tODE path to the tODE script that loads your Seaside application code

EXAMPLES
  $(basename $0) -h
  $(basename $0) seaside_3106 seaside_329 3.2.9
  $(basename $0) -l /home/mySeasideApplicationInstall seaside_3106 seaside_329 3.2.9
"
HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env

forceArg=""
while getopts "hfl:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) forceArg="-f";;
    l) postUpgradeLoadScriptPath="${OPTARG}";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 3 ]; then
	echo "missing arguments (3 expected)"; usage; exit 1
fi

sourceStoneName="$1"
targetStoneName="$2"
gsvers="$3"

$GS_HOME/bin/upgradeStone $forceArg $sourceStoneName $targetStoneName $gsvers << EOF

EOF

$GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $targetStoneName << EOF
/home/seaside/upgradeSeaside
${postUpgradeLoadScriptPath}
EOF

echo "...finished $(basename $0)"
